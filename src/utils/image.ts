import { createCanvas, loadImage, registerFont } from 'canvas';
import path from 'path';

interface FumbleResult {
  transactions: {
    token: string;
    amount: number;
    loss: number;
    type: 'Early' | 'Late';
  }[];
  totalLoss: number;
  jeetScore: number;
  rank: number;
}

interface Wallet {
  nickname?: string;
  address: string;
}

// Register custom fonts
registerFont(path.join(__dirname, '../../assets/fonts/Inter-Bold.ttf'), { family: 'Inter', weight: 'bold' });
registerFont(path.join(__dirname, '../../assets/fonts/Inter-Regular.ttf'), { family: 'Inter' });

const CANVAS_WIDTH = 1200;
const CANVAS_HEIGHT = 630;
const PADDING = 40;
const HEADER_HEIGHT = 100;

export async function generateFumbleImage(fumbles: FumbleResult, wallet: Wallet): Promise<Buffer> {
  const canvas = createCanvas(CANVAS_WIDTH, CANVAS_HEIGHT);
  const ctx = canvas.getContext('2d');

  // Background
  ctx.fillStyle = '#1a1b1e';
  ctx.fillRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);

  // Header
  ctx.fillStyle = '#2c2d31';
  ctx.fillRect(0, 0, CANVAS_WIDTH, HEADER_HEIGHT);

  // Logo
  const logo = await loadImage(path.join(__dirname, '../../assets/images/logo.png'));
  ctx.drawImage(logo, PADDING, (HEADER_HEIGHT - 40) / 2, 40, 40);

  // Title
  ctx.font = 'bold 24px Inter';
  ctx.fillStyle = '#ffffff';
  ctx.fillText('SwapJeet Score', PADDING + 50, HEADER_HEIGHT / 2 + 8);

  // Wallet info
  const displayName = wallet.nickname || `${wallet.address.slice(0, 6)}...${wallet.address.slice(-4)}`;
  ctx.font = '18px Inter';
  ctx.fillStyle = '#9ba1a6';
  ctx.fillText(displayName, CANVAS_WIDTH - PADDING - ctx.measureText(displayName).width, HEADER_HEIGHT / 2 + 6);

  // Jeet Score
  const scoreY = HEADER_HEIGHT + 80;
  ctx.font = 'bold 72px Inter';
  ctx.fillStyle = '#ffffff';
  const scoreText = `${fumbles.jeetScore}`;
  const scoreX = (CANVAS_WIDTH - ctx.measureText(scoreText).width) / 2;
  ctx.fillText(scoreText, scoreX, scoreY);

  // Score label
  ctx.font = '24px Inter';
  ctx.fillStyle = '#9ba1a6';
  const labelText = 'JEET SCORE';
  const labelX = (CANVAS_WIDTH - ctx.measureText(labelText).width) / 2;
  ctx.fillText(labelText, labelX, scoreY + 40);

  // Rank
  const rankText = getRankText(fumbles.rank);
  ctx.font = 'bold 36px Inter';
  ctx.fillStyle = getRankColor(fumbles.rank);
  const rankX = (CANVAS_WIDTH - ctx.measureText(rankText).width) / 2;
  ctx.fillText(rankText, rankX, scoreY + 100);

  // Top fumbles
  const topFumbles = fumbles.transactions
    .sort((a, b) => b.loss - a.loss)
    .slice(0, 3);

  const fumbleStartY = scoreY + 160;
  ctx.font = '18px Inter';
  ctx.fillStyle = '#9ba1a6';
  ctx.fillText('TOP FUMBLES', PADDING, fumbleStartY);

  topFumbles.forEach((fumble, index) => {
    const y = fumbleStartY + 40 + (index * 60);
    
    // Token
    ctx.font = 'bold 24px Inter';
    ctx.fillStyle = '#ffffff';
    ctx.fillText(fumble.token, PADDING, y);

    // Amount
    ctx.font = '18px Inter';
    ctx.fillStyle = '#9ba1a6';
    ctx.fillText(`${fumble.amount.toFixed(2)}`, PADDING, y + 25);

    // Loss
    ctx.font = 'bold 24px Inter';
    ctx.fillStyle = '#ff4d4d';
    const lossText = `$${fumble.loss.toLocaleString()}`;
    ctx.fillText(lossText, CANVAS_WIDTH - PADDING - ctx.measureText(lossText).width, y);

    // Type
    ctx.font = '18px Inter';
    ctx.fillStyle = '#9ba1a6';
    const typeText = `Sold ${fumble.type}`;
    ctx.fillText(typeText, CANVAS_WIDTH - PADDING - ctx.measureText(typeText).width, y + 25);
  });

  // Watermark
  ctx.font = '14px Inter';
  ctx.fillStyle = '#4a4b4f';
  const watermark = 'Generated by SwapJeet.com';
  ctx.fillText(
    watermark,
    CANVAS_WIDTH - PADDING - ctx.measureText(watermark).width,
    CANVAS_HEIGHT - PADDING
  );

  return canvas.toBuffer('image/png');
}

function getRankText(rank: number): string {
  switch (rank) {
    case 1: return 'üíé DIAMOND HANDS';
    case 2: return 'üìú PAPER HANDS';
    case 3: return 'ü§ù WEAK HANDS';
    case 4: return 'ü§≤ SHAKY HANDS';
    default: return 'üëê NORMAL TRADER';
  }
}

function getRankColor(rank: number): string {
  switch (rank) {
    case 1: return '#7b61ff'; // Purple
    case 2: return '#ff4d4d'; // Red
    case 3: return '#ffa64d'; // Orange
    case 4: return '#ffdb4d'; // Yellow
    default: return '#4dff88'; // Green
  }
} 
{
  "info": {
    "name": "SwapJeet API",
    "description": "Collection for SwapJeet API endpoints",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000",
      "type": "string"
    }
  ],
  "auth": {
    "type": "apikey",
    "apikey": [
      {
        "key": "value",
        "value": "{{authToken}}",
        "type": "string"
      },
      {
        "key": "key",
        "value": "auth_token",
        "type": "string"
      },
      {
        "key": "in",
        "value": "cookie",
        "type": "string"
      }
    ]
  },
  "item": [
    {
      "name": "Health",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/health",
          "host": ["{{baseUrl}}"],
          "path": ["health"]
        }
      }
    },
    {
      "name": "API Documentation",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/api-docs",
          "host": ["{{baseUrl}}"],
          "path": ["api-docs"]
        }
      }
    },
    {
      "name": "Auth",
      "item": [
        {
          "name": "Register",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Auto-save auth token and user ID from login responses",
                  "if (pm.response.code === 200) {",
                  "    // Extract auth token from cookies",
                  "    const cookies = pm.response.headers.get('set-cookie');",
                  "    if (cookies) {",
                  "        const authMatch = cookies.match(/swapjeet_token=([^;]+)/);",
                  "        if (authMatch && authMatch[1]) {",
                  "            pm.environment.set('authToken', authMatch[1]);",
                  "            console.log('Auth token saved');",
                  "        }",
                  "    }",
                  "",
                  "    // Extract user ID from response body",
                  "    try {",
                  "        const responseData = pm.response.json();",
                  "        if (responseData.userId) {",
                  "            pm.environment.set('userId', responseData.userId);",
                  "            console.log('User ID saved:', responseData.userId);",
                  "        }",
                  "    } catch (e) {",
                  "        console.error('Failed to parse response JSON:', e);",
                  "    }",
                  "}",
                  "",
                  "// Log any errors",
                  "if (pm.response.code >= 400) {",
                  "    console.error('Authentication request failed:', pm.response.code);",
                  "    try {",
                  "        console.error('Error details:', pm.response.json());",
                  "    } catch (e) {",
                  "        console.error('Response body:', pm.response.text());",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-XSRF-TOKEN",
                "value": "{{csrfToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{email}}\",\n    \"password\": \"{{password}}\",\n    \"name\": \"{{name}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "register"]
            }
          }
        }
      ],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "exec": [
              "// Auto-save auth token and user ID from login responses",
              "pm.test(\"Save authentication data\", () => {",
              "    if (pm.response.code === 200) {",
              "        const cookies = pm.response.headers.get('set-cookie');",
              "        if (cookies) {",
              "            const authMatch = cookies.match(/auth_token=([^;]+)/);",
              "            if (authMatch && authMatch[1]) {",
              "                pm.environment.set('authToken', authMatch[1]);",
              "                console.log('Auth token saved');",
              "            }",
              "        }",
              "",
              "        const responseData = pm.response.json();",
              "        if (responseData.userId) {",
              "            pm.environment.set('userId', responseData.userId);",
              "            console.log('User ID saved:', responseData.userId);",
              "        }",
              "    }",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Google OAuth Login",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-XSRF-TOKEN",
                "value": "{{csrfToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"token\": \"{{googleToken}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/google",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "google"]
            },
            "description": "Authenticate user with Google OAuth token"
          }
        },
        {
          "name": "Password Login",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-XSRF-TOKEN",
                "value": "{{csrfToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"user@example.com\",\n  \"password\": \"yourpassword\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            },
            "description": "Login with email and password"
          }
        },
        {
          "name": "Set Password",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-XSRF-TOKEN",
                "value": "{{csrfToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": \"{{userId}}\",\n  \"password\": \"newpassword\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/set-password",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "set-password"]
            },
            "description": "Set password for Google-authenticated users"
          }
        },
        {
          "name": "Forgot Password",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-XSRF-TOKEN",
                "value": "{{csrfToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"user@example.com\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/forgot-password",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "forgot-password"]
            },
            "description": "Request password reset token"
          }
        },
        {
          "name": "Reset Password",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-XSRF-TOKEN",
                "value": "{{csrfToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"token\": \"{{resetToken}}\",\n  \"newPassword\": \"newpassword\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/reset-password",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "reset-password"]
            },
            "description": "Reset password with token"
          }
        },
        {
          "name": "Logout",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "X-XSRF-TOKEN",
                "value": "{{csrfToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/logout",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "logout"]
            },
            "description": "Logout user and clear auth token"
          }
        }
      ]
    },
    {
      "name": "Wallets",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "exec": [
              "// Ensure auth token and CSRF token are present",
              "if (!pm.environment.get('authToken')) {",
              "    console.error('Missing auth token. Please login first.');",
              "}",
              "",
              "if (!pm.environment.get('csrfToken')) {",
              "    console.error('Missing CSRF token. Please check if the server is running.');",
              "}"
            ]
          }
        }
      ],
      "item": [
        {
          "name": "Get User's Wallets",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/wallets?includeDetails=true&tag=Me",
              "host": ["{{baseUrl}}"],
              "path": ["wallets"],
              "query": [
                {
                  "key": "includeDetails",
                  "value": "true"
                },
                {
                  "key": "tag",
                  "value": "Me"
                }
              ]
            },
            "description": "Get list of user's wallets with optional details"
          }
        },
        {
          "name": "Add Wallet",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-XSRF-TOKEN",
                "value": "{{csrfToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"address\": \"0x742d35Cc6634C0532925a3b844Bc454e4438f44e\",\n  \"nickname\": \"My Trading Wallet\",\n  \"tag\": \"Me\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/wallets",
              "host": ["{{baseUrl}}"],
              "path": ["wallets"]
            },
            "description": "Add a new wallet to track"
          }
        },
        {
          "name": "Get Wallet Details",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/wallets/{{address}}?refresh=false",
              "host": ["{{baseUrl}}"],
              "path": ["wallets", "{{address}}"],
              "query": [
                {
                  "key": "refresh",
                  "value": "false"
                }
              ]
            },
            "description": "Get detailed information about a specific wallet"
          }
        },
        {
          "name": "Update Wallet",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-XSRF-TOKEN",
                "value": "{{csrfToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nickname\": \"Updated Wallet Name\",\n  \"tag\": \"Whale\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/wallets/{{address}}",
              "host": ["{{baseUrl}}"],
              "path": ["wallets", "{{address}}"]
            },
            "description": "Update wallet nickname or tag"
          }
        },
        {
          "name": "Delete Wallet",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "X-XSRF-TOKEN",
                "value": "{{csrfToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/wallets/{{address}}",
              "host": ["{{baseUrl}}"],
              "path": ["wallets", "{{address}}"]
            },
            "description": "Remove a wallet from tracking"
          }
        },
        {
          "name": "Get Wallet Fumbles",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/wallets/{{address}}/fumbles?timeframe=30d",
              "host": ["{{baseUrl}}"],
              "path": ["wallets", "{{address}}", "fumbles"],
              "query": [
                {
                  "key": "timeframe",
                  "value": "30d"
                }
              ]
            },
            "description": "Analyze wallet transactions to find missed opportunities"
          }
        },
        {
          "name": "Export Fumbles as PNG",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-XSRF-TOKEN",
                "value": "{{csrfToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"theme\": \"dark\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/wallets/{{address}}/export",
              "host": ["{{baseUrl}}"],
              "path": ["wallets", "{{address}}", "export"]
            },
            "description": "Generate a shareable PNG image of fumble analysis"
          }
        }
      ]
    },
    {
      "name": "User Preferences",
      "item": [
        {
          "name": "Get User Preferences",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/preferences",
              "host": ["{{baseUrl}}"],
              "path": ["preferences"]
            },
            "description": "Get user's application preferences"
          }
        },
        {
          "name": "Update User Preferences",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-XSRF-TOKEN",
                "value": "{{csrfToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"alerts\": {\n    \"enabled\": true,\n    \"threshold\": 1000,\n    \"email\": true,\n    \"push\": false\n  },\n  \"showLeaderboard\": true,\n  \"walletOrder\": [\"0x123...\", \"0x456...\"],\n  \"hideSmall\": true,\n  \"fumbleTheme\": \"dark\",\n  \"achievements\": {\n    \"showOnProfile\": true,\n    \"notifications\": true\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/preferences",
              "host": ["{{baseUrl}}"],
              "path": ["preferences"]
            },
            "description": "Update user's application preferences"
          }
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Automatically get CSRF token from health endpoint if not present",
          "if (!pm.environment.get('csrfToken')) {",
          "    pm.sendRequest({",
          "        url: pm.environment.get('baseUrl') + '/health',",
          "        method: 'GET'",
          "    }, function (err, res) {",
          "        if (!err) {",
          "            const cookies = res.headers.get('set-cookie');",
          "            if (cookies) {",
          "                const csrfMatch = cookies.match(/XSRF-TOKEN=([^;]+)/);",
          "                if (csrfMatch && csrfMatch[1]) {",
          "                    pm.environment.set('csrfToken', csrfMatch[1]);",
          "                    console.log('CSRF token set:', csrfMatch[1]);",
          "                }",
          "            }",
          "        }",
          "    });",
          "}"
        ]
      }
    }
  ]
} 